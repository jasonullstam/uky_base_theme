{"version":3,"sources":["pattern-scaffolding.scss","includes/_colors.scss","includes/_fonts.scss","includes/_design-variables.scss","../../node_modules/root-rhythm/sass/_rr-grid.scss","../../node_modules/root-rhythm/sass/_rr-util.scss","../../node_modules/root-rhythm/sass/_rr-baseline.scss","../../node_modules/root-rhythm/sass/_rr-config.scss"],"names":[],"mappings":"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","file":"pattern-scaffolding.css","sourcesContent":["/**\n * This stylesheet is for styles you want to include only when displaying demo\n * styles for grids, animations, color swatches, etc.\n * These styles will not be your production CSS.\n */\n@import 'root-rhythm';\n@import 'includes/design-variables';\n@import 'includes/mixins/m_typography';\n@import 'includes/colors';\n@import 'includes/fonts';\n\n#sg-patterns {\n  max-width: 100%;\n}\n\n.demo-animate {\n  background: #ddd;\n  padding: 1em;\n  margin-bottom: 1em;\n  text-align: center;\n  border-radius: 8px;\n  cursor: pointer;\n}\n\n.sg-colors {\n  margin-left: 0;\n  list-style: none;\n  @include css-grid-columns(map-get($rr-grids,6-up));\n}\n\n.sg-colors__column {\n  border: 2px solid color(light-gray);\n  border-radius: 8px;\n  padding: rr-grid-remainder(2px);\n  overflow: hidden;\n  @include rr-font-compute(r, tight);\n\n  margin {\n    top: rr-gridbase(2);\n    bottom: rr-gridbase(2);\n  }  \n}\n\n.sg-colors pre {\n  @include rr-font-compute(xs,tight);\n  margin-bottom: rr-gridbase();\n}\n\n.sg-swatch {\n  display: block;\n  height: rr-gridbase(10);\n  margin-bottom: rr-gridbase();\n  border-radius: 5px;\n  padding: rr-grid-remainder(5px);\n}\n\n.sg-pattern-example {\n\toverflow: hidden;\n}\n\n.sg-pattern {\n  margin-bottom: rr-gridbase(4);\n}\n\n.sg-pattern-head {\n  @include rr-font-compute(r);\n  padding: rr-gridbase();\n}\n\n.sg-pattern-title {\n  padding {\n    top: rr-gridbase(2);\n    bottom: rr-gridbase(2);\n  }\n  a {\n    padding: 0;\n    border-bottom-width: 0;\n  }\n}\n\n.sg-pattern-extra {\n  display: none;\n}\n\n.sg-image-grid {\n  .sg-image-grid-tile {\n    margin-bottom: 2rem;\n  }\n\n  @media screen and ( min-width: 44rem ) {\n    display: flex;\n    margin-left: -1rem;\n    margin-right: -1rem;\n\n    .sg-image-grid-tile {\n      margin-left: 1rem;\n      margin-right: 1rem;\n      margin-bottom: 0;\n    }\n  }\n}\n\nbody.layout-grid--on {\n  @include rr-grid-overlay;\n}\n\n.toggleGroup {\n  position: absolute;\n  right: 1rem;\n  top: 1rem;\n  z-index: 999;\n\n  button {\n    display: inline-block;\n\n    background-color: black;\n    border-color: black;\n    font-size: 12px;\n    font-weight: bold;\n    padding: 2px 8px;\n    line-height: 1;\n    border-radius: 8px;\n  }\n}\n\n.twig-include {\n  position: relative;\n}\n\n.twig-include__label {\n  display: none;\n\n  position: absolute;\n  right: 1rem;\n  top: 0rem;\n  color: red;\n  z-index: 998;\n}\n\nbody.twig-includes--on {\n  .twig-include {\n    border: 2px solid red;\n  }\n  .twig-include__label {\n    display: block;\n  }\n}\n","/* Colors\n/* remember to turn off any unused swatches in atoms>global>colors.twig\n/* _______________________________________________________________ */\n\n$color-undefined: #aaaaaa;\n$white: #fff;\n$black: #2c2a29;\n\n/// Returns the luminance of `$color` as a float (between 0 and 1)\n/// 1 is pure white, 0 is pure black\n/// @param {Color} $color - Color\n/// @return {Number}\n/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef Reference\n@function luminance($color) {\n    $colors: ( 'red': red($color), 'green': green($color), 'blue': blue($color));\n    @each $name,\n    $value in $colors {\n        $adjusted: 0;\n        $value: $value / 255;\n        @if $value < 0.03928 {\n            $value: $value / 12.92;\n        }\n        @else {\n            $value: ($value + .055) / 1.055;\n            $value: pow($value, 2.4);\n        }\n        $colors: map-merge($colors, ($name: $value));\n    }\n    @return (map-get($colors, 'red') * .2126)+(map-get($colors, 'green') * .7152)+(map-get($colors, 'blue') * .0722);\n}\n\n@function contrast($c1,$c2) {\n    $l1: luminance($c1);\n    $l2: luminance($c2);\n    @if $l1 > $l2 {\n        @return ($l1 + 0.05) / ($l2 + 0.05);\n    }\n    @return ($l2 + 0.05) / ($l1 + 0.05);\n}\n\n@function color($name: wildcat-blue, $scheme: $colors) {\n    @if map-has-key($scheme, $name) {\n        @return map-get($scheme, $name);\n    }\n    @return $color-undefined;\n}\n\n@mixin usescheme($textscheme) {\n    color: color(text,$textscheme);\n\n    .cite-media .icon-label {\n        color: color(media-citation,$textscheme);\n    }\n\n    a {\n        @include link-colors($d: color(link, $textscheme), $h:color(link-active, $textscheme));\n    }\n\n    .image-with-caption__media {\n        background-color: color(media-background, $textscheme);\n    }\n\n    button, a.button {\n        border-color: color(button-border,$textscheme);\n        background-color: color(button-background,$textscheme);\n        color: color(button-text,$textscheme);\n\n        // attach default colors to the anchor-as-button version\n        &:link {\n            border-color: color(button-border, $textscheme);\n            background-color: color(button-background, $textscheme);\n            color: color(button-text, $textscheme);\n        }\n        \n\n        &.button--ghost {\n            background-color: transparent;\n            color: color(button-border,$textscheme);\n        }\n\n        &[disabled] {\n            border-color: color(button-disabled-border, $textscheme) !important;\n            background-color: color(button-disabled-background, $textscheme) !important;\n            color: color(button-disabled-text, $textscheme) !important;\n\n            &.button--ghost {\n                background-color: transparent !important;\n                // The ghost disabled text is a weird case; we have to \n                // tune it for specific text schemes\n                @if $textscheme == $text-colors-dark {\n                    color: color(wildcat-white) !important;\n                } @else {\n                    color: color(button-disabled-text, $textscheme) !important;\n                }                \n            }\n        }\n\n        &:hover {\n            border-color: color(button-hover-border, $textscheme);\n            background-color: color(button-hover-background, $textscheme);\n            color: color(button-hover-text, $textscheme);\n        }\n\n        &:active {\n            border-color: color(button-active-border, $textscheme);\n            background-color: color(button-active-background, $textscheme);\n            color: color(button-active-text, $textscheme);\n            &.button--ghost {\n                color: color(button-active-text,$textscheme);\n            }\n        }\n\n        &:focus {\n            background-color: color(button-focus-background, $textscheme);\n            border-color: color(button-focus-border, $textscheme);\n            color: color(button-focus-text, $textscheme);\n            outline: none;\n\n            &.button--ghost {\n                background-color: transparent;\n                // Like disabled ghost, the focus state is quite different\n                // and we need some extra tuning                \n                @if $textscheme == $text-colors-dark {\n                    color: color(wildcat-white);\n                }\n                @else {\n                    color: color(button-focus-text, $textscheme);\n                }\n            }\n        }\n    }\n\n    .headline-group .headline-group__super {\n        color: color(headline-group-super, $textscheme);\n    }\n\n    .headline-group .headline-group__sub {\n        color: color(headline-group-sub, $textscheme);\n    }\n\n    .slick-prev,\n    .slick-next {\n        background-color: color(carousel-single-button,$textscheme);\n        color: transparent; // Content in the button should not be visible\n        &:hover, &:focus {\n            color: transparent; // Content in the button should not be visible\n            background-color: color(carousel-single-button,$textscheme);\n        }\n        &:before {\n            color: color(carousel-single-button-art,$textscheme);\n        }\n    }\n\n\n    .slick-dots li {\n        button:before {\n            color: color(carousel-dot,$textscheme);\n        }\n        &.slick-active button:before {\n            color: color(carousel-dot-active, $textscheme);\n        }\n    }    \n}\n\n@mixin ondark() {\n    warning: \"ondark-depricated\";\n    @include usescheme($text-colors-dark);\n}\n\n\n\n","@import url('https://cloud.typography.com/6863274/6747792/css/fonts.css');\n//@import url(\"/count/35e586\");\n@font-face {\n    font-family: 'AvenirNextLTPro';\n    font-weight: normal;\n    font-style: normal;\n    src: url('../fonts/35E586_1_0.eot');\n    src: url('../fonts/35E586_1_0.eot?#iefix') format('embedded-opentype'), url('../fonts/35E586_1_0.woff2') format('woff2'), url('../fonts/35E586_1_0.woff') format('woff'), url('../fonts/35E586_1_0.ttf') format('truetype');\n}\n\n@font-face {\n    font-family: 'AvenirNextLTPro';\n    font-weight: normal;\n    font-style: italic;\n    src: url('../fonts/35E586_3_0.eot');\n    src: url('../fonts/35E586_3_0.eot?#iefix') format('embedded-opentype'), url('../fonts/35E586_3_0.woff2') format('woff2'), url('../fonts/35E586_3_0.woff') format('woff'), url('../fonts/35E586_3_0.ttf') format('truetype');\n}\n\n@font-face {\n    font-family: 'AvenirNextLTPro';\n    font-weight: 500;\n    font-style: normal;\n    src: url('../fonts/35E586_0_0.eot');\n    src: url('../fonts/35E586_0_0.eot?#iefix') format('embedded-opentype'), url('../fonts/35E586_0_0.woff2') format('woff2'), url('../fonts/35E586_0_0.woff') format('woff'), url('../fonts/35E586_0_0.ttf') format('truetype');\n}\n\n@font-face {\n    font-family: 'AvenirNextLTPro';\n    font-weight: 500;\n    font-style: italic;\n    src: url('../fonts/35E586_5_0.eot');\n    src: url('../fonts/35E586_5_0.eot?#iefix') format('embedded-opentype'), url('../fonts/35E586_5_0.woff2') format('woff2'), url('../fonts/35E586_5_0.woff') format('woff'), url('../fonts/35E586_5_0.ttf') format('truetype');\n}\n\n@font-face {\n    font-family: 'AvenirNextLTPro';\n    font-weight: bold;\n    font-style: normal;\n    src: url('../fonts/35E586_4_0.eot');\n    src: url('../fonts/35E586_4_0.eot?#iefix') format('embedded-opentype'), url('../fonts/35E586_4_0.woff2') format('woff2'), url('../fonts/35E586_4_0.woff') format('woff'), url('../fonts/35E586_4_0.ttf') format('truetype');\n}\n\n@font-face {\n    font-family: 'AvenirNextLTPro';\n    font-weight: bold;\n    font-style: italic;\n    src: url('../fonts/35E586_2_0.eot');\n    src: url('../fonts/35E586_2_0.eot?#iefix') format('embedded-opentype'), url('../fonts/35E586_2_0.woff2') format('woff2'), url('../fonts/35E586_2_0.woff') format('woff'), url('../fonts/35E586_2_0.ttf') format('truetype');\n}\n\nbody {\n    font-family: $font-avenirnext;\n}\n\n.font-mercury {\n    font-family: $font-mercury;\n}\n\n.font-avenirnext {\n    font-family: $font-avenirnext;\n}\n\n","$font-mercury: 'Mercury Display A', 'Mercury Display B', serif;\n\n$font-avenirnext: 'AvenirNextLTPro', sans-serif;\n\n$global-width: 72rem;\n\n$rr-max-width: $global-width;\n\n$rr-grid-divisions: 2;\n\n$rr-blend-mode: multiply;\n\n$rr-grid-settings: ( \n    s: ( \n        mq: max-width, \n        size: 35rem, \n        columns: 4, \n        gutter: 1rem / $rr-grid-divisions, \n        offset: 1rem, \n        vspace: 2,\n        column_color: rgba(200, 200, 255, .2),\n        baseline_color: rgba(128, 128, 200, .2)\n    ), \n    m: ( \n        mq: min-width, \n        size: 35rem, \n        gutter: 1rem,\n        columns: 8, \n        offset: 2rem,\n        vspace: 3, //  21px / 42px\n        column_color: rgba(255, 200, 200, .2),\n        baseline_color: rgba(128, 128, 200, .2)        \n    ), \n    l: ( \n        size: 48rem, \n        columns: 12,\n        column_color: rgba(128, 255, 200, .2),\n        baseline_color: rgba(128, 128, 200, .2)        \n    ), \n    xl: ( \n        size: $global-width + 4rem, \n        offset: 0,\n        gutter: 2rem, //36px \n        vspace: 5, // (36px / 72px)\n        column_color: rgba(200, 128, 255, .2),\n        baseline_color: rgba(128, 128, 200, .2)        \n    ),\n    xlp: (\n        size: $global-width + 8rem\n    )\n\n);\n\n$rr-grids: (\n    2-up: (\n        m : (\n            columns: 2,\n        )\n    ),\n    3-up: (\n        m : (\n            columns: 2,\n        ),\n        l : (\n            columns: 3,\n        )\n    ),\n    4-up: (\n        m : (\n            columns: 2,\n        ),\n        l : (\n            columns: 4,\n        )\n    ),\n    5-up: (\n        m : (\n            columns: 3,\n        ),\n        l : (\n            columns: 5,\n        )        \n    ),\n    6-up: (\n        m : (\n            columns: 3,\n        ),\n        l : (\n            columns: 4,\n        ),\n        xl : (\n            columns: 6\n        )\n    ),\n    sidebar-left: (\n        m: (\n            columns: 3,\n            areas : side main main\n        ),\n        l : (\n            columns: 4,\n            areas: side main main main\n        )\n    ),\n    sidebar-right: (\n        m: (\n            columns: 3,\n            areas: main main side,\n            flex-columns: 2\n        ),\n        l : (\n            columns: 4,\n            areas: main main main side\n        )\n    ),\n    major-left: (\n        m: (\n            columns: 2,\n            areas: major minor,\n            flex-columns: 2\n        ),\n        l : (\n            columns: 3,\n            areas: major major minor,\n        )        \n    ),\n    major-right: (\n        m: (\n            columns: 2,\n            areas: minor major,\n            flex-columns: 2\n        ),\n        l : (\n            columns: 3,\n            areas: minor major major,\n        )\n    )\n);\n\n$lineheights: (\n    hpc: -2,\n    squeeze: -1,\n    tight: 0,\n    medium: 1,\n    wide: 2,\n    huge: 3,\n    redic: 4\n);\n\n$fonts: ( \n    s : (\n        xs: .75rem, //12  xxs\n        s: .875rem, //14  xs\n        r: 1rem, //16 s\n        l: 1.1667rem, // r\n        xl: 1.25rem, // l \n        2xl: 1.5rem, \n        3xl: 1.775rem, \n        4xl: 2.0rem,\n        5xl: 2.4286rem\n    ),\n    xl : (\n        xs: .75rem,\n        s: .875rem,\n        r: 1rem,\n        l: 1.1667rem,\n        xl: 1.25rem,\n        2xl: 1.5rem,\n        3xl: 1.875rem,\n        4xl: 2.375rem,\n        5xl: 3.4286rem\n    )\n);\n\n$font-sizes: rr-font-sizes();\n\n$editorial-headings: (\n    h2 : (\n        size: 3xl,\n        lineheight: tight,\n        font: $font-mercury,        \n        weight: normal,\n    ),\n    h3 : (\n        size: 2xl,\n        lineheight: tight,\n        weight: normal,\n    ),\n    h4 : (\n        size: xl,\n        lineheight: tight,\n        weight: normal,\n    ), \n    h5 : (\n        size: xl,\n        lineheight: tight,\n        weight: normal,\n        style: italic\n    ),\n    h6 : (\n        size: l,\n        lineheight: tight,\n        weight: normal\n    )\n);\n\n$colors: (\n    wildcat-blue: #0033a0,\n    wildcat-white: #fff,\n    wildcat-black: #2c2a29,\n    light-blue: #1897d4,\n    medium-blue: #2b3a82,\n    dark-blue: #1f2c5e,\n    light-blue-tint: #a1d3ed,\n    light-blue-shade: #106693,\n    blue-black: #000500,    \n    light-gray: #c8c8c7,\n    subtle-gray: #ebebeb,\n    dark-gray: #515664,\n    success: lawngreen,\n    warning: darkorange,\n    alert: #c12c2b,\n    info: #a1d3ed,\n);\n\n$text-colors: (\n    link: color(wildcat-black),\n    link-active: color(medium-blue),\n    text: color(wildcat-black),\n    accent: color(alert),\n    button-border: color(wildcat-blue),\n    button-background: color(wildcat-blue),\n    button-text: color(wildcat-white),\n    button-disabled-border: color(subtle-gray),\n    button-disabled-background: color(subtle-gray),\n    button-disabled-text: color(dark-gray),\n    button-hover-border: color(light-blue),\n    button-hover-background: color(light-blue),\n    button-hover-text: color(wildcat-white),\n    button-active-border: color(medium-blue),\n    button-active-background: color(medium-blue),\n    button-active-text: color(wildcat-white),\n    button-focus-border: color(light-blue),\n    button-focus-background: color(wildcat-white),\n    button-focus-text: color(wildcat-blue),\n    headline-group-super: color(dark-gray),\n    headline-group-sub: color(dark-gray),\n    media-citation: color(dark-gray),\n    carousel-single-button: color(dark-gray),\n    carousel-single-button-art: color(wildcat-white),\n    carousel-center-button: transparent,\n    carousel-center-button-art: color(wildcat-white),\n    carousel-dot: color(light-gray),\n    carousel-dot-active: color(wildcat-black),\n    carousel-center-caption: color(wildcat-black),\n    media-background: color(wildcat-blue)\n);\n\n$text-colors-dark: (\n    link: color(wildcat-white),\n    link-active: color(wildcat-white),\n    text: color(wildcat-white),\n    accent: color(success),\n    button-border: color(wildcat-white),\n    button-background: color(wildcat-white),\n    button-text: color(wildcat-blue),\n    button-disabled-border: rgba(#ededed,.66),\n    button-disabled-background: rgba(#ededed, .66),\n    button-disabled-text: color(wildcat-blue),\n    button-hover-border: color(light-blue),\n    button-hover-background: color(light-blue),\n    button-hover-text: color(wildcat-white), \n    button-active-border: color(dark-blue),\n    button-active-background: color(dark-blue),\n    button-active-text: color(wildcat-white),\n    button-focus-border: color(light-blue),\n    button-focus-background: color(wildcat-white),\n    button-focus-text: color(wildcat-blue),\n    headline-group-super: color(light-gray),\n    headline-group-sub: color(light-gray),\n    media-citation: color(wildcat-white),\n    carousel-single-button: color(dark-gray),\n    carousel-single-button-art: color(wildcat-white),\n    carousel-center-button: transparent,\n    carousel-center-button-art: color(wildcat-white),\n    carousel-dot: color(subtle-gray),\n    carousel-dot-active: color(light-blue-tint),\n    carousel-center-caption: color(wildcat-black),  \n    media-background: color(wildcat-black)\n);\n\n\n// convenience aliases\n$white: color(wildcat-white);\n$black: color(wildcat-black);\n$color-text: color(text);\n$color-link: color(link);\n\n// Set rr defaults\n\n$rr-fonts: $fonts;\n$rr-lineheights: $lineheights;\n\n\n\n","// Creates a slab for a slab layout. \n// Layout options are provided in other mixins\n// All options are driven by the global configuration\n// Slabs bring their own padding to the party which \n// we will override in some special circumstances.\n@mixin rr-slab {\n    $breaks: rr-breakpoint_list();\n    @each $break in $breaks {\n        $vspace: rr-gridbase(rr-prop-for-breakpoint($break, vspace));\n        @if $break==nth($breaks, 1) {\n            padding: $vspace rr-prop-for-breakpoint($break, offset);\n        }\n        @else {\n            @include rr-break-directive($break) {\n                padding: $vspace rr-prop-for-breakpoint($break, offset);\n            }\n        }\n    }\n}\n\n// This creates a slab wrapper constrained to the main content width\n@mixin rr-slab-wrapper($margins: false) {\n    max-width: $rr-maxwidth;\n    margin: 0 auto;\n\n    @if not $margins {\n        // Get rid of top margins on the first child,\n        // bottom margins on the second so those\n        // margins don't pop out of the wrapper.\n        > :first-child {\n            margin-top: 0;\n        }\n\n        > :last-child {\n            margin-bottom: 0;\n        }\n    }\n}\n\n// This creates a full-bleed slab wrapper\n@mixin rr-slab-full-fullbleed {\n    max-width: none;\n    margin: 0;\n    > :first-child {\n        margin-top: 0;\n    }\n    > :last-child {\n        margin-bottom: 0;\n    }\n}\n\n// Pass this a list of class names (without the '.' prefix) and \n// adjacency classes that collapse padding between the \n@mixin rr-slab-adjacency($style-list) {\n    @each $style in $style-list {\n        .#{$style}+.#{$style} {\n            padding-top: 0;\n        }\n    }\n}\n\n@function rr-columns-for-template($template, $break) {\n    @if map-has-key($template, $break) {\n        $break-template: map-get($template, $break);\n        @if map-has-key($break-template, columns) {\n            @return map-get($break-template, columns);\n        }\n    }\n    @return null;\n}\n\n@function rr-areas-for-template($template, $break) {\n    @if map-has-key($template, $break) {\n        $break-template: map-get($template, $break);\n        @if map-has-key($break-template, areas) {\n            @return map-get($break-template, areas);\n        }\n    }\n    @return null;\n}\n\n@function rr-flex-columns-for-template($template, $break) {\n    @if map-has-key($template, $break) {\n        $break-template: map-get($template, $break);\n        @if map-has-key($break-template, flex-columns) {\n            @return map-get($break-template, flex-columns);\n        }\n    }\n    @return null;\n}\n\n// Code below is by Jesse Janowiak of NewCity; currently \n// working on integrating it with the existing code.\n\n// CSS GRID MIXINS\n//  `css-grid-columns( $count, $gutter, $gutter-s, $class-prefix, $breakpoint, $rr-support-ie)`\n//  `content-width( $count, $class-prefix, $breakpoint, $rr-support-ie )`\n//  `reverse-grid-columns( $count, $class-prefix, $breakpoint, $rr-support-ie )`\n// DEPENDENCIES\n// These mixins currently rely on Zurb's Foundation 6 for Sites Sass libraries,\n// specifically the `breakpoint` mixin and breakpoint values set in `foundation-settings`\n// SHARED VARIABLES\n$global-width: $rr-maxwidth !default;\n// `css-grid-columns` mixin\n// Builds a basic multi-column layout using pure CSS Grid.\n// Best used with content that divides evenly into full rows of the specified column count.\n//\n// Supports the following settings:\n//\n// $count:         The number of columns each row; defaults to 3\n// $gutter:        The space between columns; defaults to Foundation's\n//                 global $grid-column-gutter.\n//                 NOTE: Row gaps are not supported in IE. In this mixin, they are simulated\n//                 with bottom margins when the layout switches to single column.\n//                 If `$rr-support-ie` is disabled, `$gutter` can be either a single value applied\n//                 to both row and column gutters, or two values of the format\n//                 `row-gutter column-gutter`\n// $gutter-s:      If your grid breakpoint is set to 'small' so that the layout remains columned even\n//                 at the smallest breakpoint, you may want to use a narrower column gutter at that breakpoint.\n//                 Set the small gutter value here.\n// $class-prefix:  By default, all styles applied to child columns will be applied to the class\n//                 `&__column`. If you want to use a different prefix for columns than for the parent\n//                  class, set this value. DO include the leading `.`\n// $breakpoint:    The breakpoint above which the layout switches from a single column to\n//                 the specified column count. Accepts a predefined breakpoint\n//                 definition (e.g. 'medium') or a unitless pixel width.\n//                 Requires Foundation's `breakpoint` mixin or another breakpoint mixin\n//                 with the same syntax.\n// $reverse:       Applies the `reverse-grid-columns` mixin instead of the standard column placement.\n// $rr-support-ie:    If set to `false`, the fallback code for IE 10 and 11 will be omitted.\n//                 This results in cleaner stylesheet code if you don't need to support those\n//                 browsers.\n//\n// Required html markup (if this mixin is applied to a class called `.row-container`):\n// <div class=\"row-container\">\n//\n//    <div class=\"row-container__column\">\n//      Column Content\n//    </div>\n//\n//    <div class=\"row-container__column\">\n//      Column Content\n//    </div>\n//\n//    <div class=\"row-container__column\">\n//      Column Content\n//    </div>\n//\n// </div>\n\n@mixin css-grid-columns($templates, $config: $rr-grid-settings, $class-prefix:null, $reverse: false ) {\n\n    $medium-size: rr-prop-for-breakpoint(m, size);\n    @if not $class-prefix {\n        $class-prefix: #{&};\n    }\n        \n    @supports ( grid-template-columns: 1px) {\n        display: grid;\n        \n        $breaks: rr-breakpoint_list();\n        @each $break in $breaks {\n            $num_columns: rr-columns-for-template($templates,$break);\n            $grid-gap: rr-strict-prop-for-breakpoint($break,gutter);\n            $grid-areas: rr-areas-for-template($templates,$break);\n            grid-auto-rows: auto;\n            @if $num_columns or $grid-gap {\n                @include rr-break-directive($break) {\n                    @if $grid-gap {\n                        grid-gap: rr-prop-for-breakpoint($break, gutter);\n                    }\n                    @if $num_columns {\n                        grid-template-columns: repeat(#{$num_columns}, minmax(0,1fr));\n                    }\n                    @if $grid-areas {\n                        grid-template-areas: \"#{$grid-areas}\";\n                    }\n                }\n            }\n        }\n    }\n}\n\n@mixin _rr-ie-css-grid-columns($templates, $class-prefix: '', $reverse: false) {\n    // Old rules for IE\n    display: flex;\n    $breaks: rr-breakpoint_list();\n    @each $break in $breaks {\n        $gutter: rr-prop-for-breakpoint($break, gutter);\n        @include rr-break-directive($break) {\n\n        }\n    }\n}\n\n@mixin _rr-ie-css-grid-columns_old($count: 3, $class-prefix: '', $reverse: false) {\n    $gutter-s: rr-prop-for-breakpoint(s, gutter);\n    $gutter: rr-prop-for-breakpoint(m, gutter);\n    $medium-size: rr-prop-for-breakpoint(m, size);\n\n\n    @media (max-width: #{$medium-size}) {\n        $ms-column-defs: 1fr;\n        @if $gutter-s is not sameas(0) {\n            @for $i from 2 through $count {\n                $ms-column-defs: $ms-column-defs $gutter-s 1fr;\n            }\n        }\n        @else {\n            @for $i from 2 through $count {\n                $ms-column-defs: $ms-column-defs 1fr;\n            }\n        }\n        -ms-grid-columns: $ms-column-defs;\n    }\n    @media (min-width: #{$medium-size}) {\n        display: -ms-grid;\n    }\n    $ms-column-defs: 1fr;\n    @if $gutter is not sameas(0) {\n        @for $i from 2 through $count {\n            $ms-column-defs: $ms-column-defs $gutter 1fr;\n        }\n    }\n    @else {\n        @for $i from 2 through $count {\n            $ms-column-defs: $ms-column-defs 1fr;\n        }\n    }\n    -ms-grid-columns: $ms-column-defs;\n    #{$class-prefix}__column {\n        -ms-grid-column-span: 1;\n        -ms-grid-row: 1;\n        @for $i from 1 through $count {\n            @if ( $reverse) {\n                @include reverse-grid-columns( $count: $count, $class-prefix: $class-prefix, $breakpoint: $breakpoint)\n            }\n            @else {\n                &:nth-child(#{$i}) {\n                    -ms-grid-column: $i * 2 - 1;\n                }\n            }\n        }\n    }\n    -ms-grid-rows: auto;\n}\n\n// `reverse-grid-columns` mixin\n//  Changes the column order of a row created with the `css-grid-columns` from left-to-right\n//  to right-to-left. It can be set as the default layout for a specific class by passing `$reverse: true`\n//  to `css-grid-columns`, or it can be used as a stand-alone mixin for reversing the columns of\n//  an existing grid layout.\n//  NOTE: If applied to a row that is already right-to-left, this mixin will NOT switch it back to\n//        left-to-right. It only works in one direction.\n//\n// Supports the following settings:\n//\n// $count:         The number of columns each row; defaults to 3\n// $class-prefix:  By default, all styles applied to child columns will be applied to the class\n//                 `&__column`. If you want to use a different prefix for columns than for the parent\n//                  class, set this value. DO include the leading `.`\n// $breakpoint:    The breakpoint above which the layout switches from a single column to\n//                 the specified column count. Accepts a predefined breakpoint\n//                 definition (e.g. 'medium') or a unitless pixel width.\n//                 Requires Foundation's `breakpoint` mixin or another breakpoint mixin\n//                 with the same syntax.\n// $rr-support-ie:    If set to `false`, the fallback code for IE 10 and 11 will be omitted.\n//                 This results in cleaner stylesheet code if you don't need to support those\n//                 browsers.\n@mixin reverse-grid-columns( $count: 3, $class-prefix: '', $breakpoint: 'medium', $rr-support-ie: true) {\n    @if $class-prefix=='' {\n        $class-prefix: #{&};\n    }\n    $class-prefix: #{'.' + $class-prefix};\n    #{$class-prefix}__column {\n        $ms-columns: $count + $count - 1;\n        @for $i from 0 through $count - 1 {\n            @include breakpoint($breakpoint) {\n                &:nth-child(#{$i + 1}) {\n                    -ms-grid-column: $ms-columns - (($i + 1) * 2 - 1) + 1;\n                    @supports ( grid-column-start: 1) {\n                        grid-column-start: $count - $i;\n                        grid-row: 1;\n                    }\n                }\n            }\n        }\n    }\n}\n\n// `content-width` mixin\n//  For the common use-case of a content column that needs to be restricted to a maximum width and centered\n//  horizontally in the viewport. Can optionally include a left and right gutter value so that a specific\n//  amount of vertical space is always reserved between the content and the viewport edges.\n//\n//  Supports the following settings:\n//\n//  $max-width:          The maximum width of the content inside this container\n//  $gutter:             Minimum distance between the content and the left and right viewport edges.\n//                       Defaults to the `$gutter-medium` value set above or inherited from another settings file.\n//  $container-selector: Selector for the content area. Defaults to `&__container`. DO include the leading `.`\n//  $rr-support-ie:         If set to `false`, the fallback code for IE 10 and 11 will be omitted.\n//                       This results in cleaner stylesheet code if you don't need to support those\n//                       browsers.\n//\n// Required html markup (if this mixin is applied to a class called `.slab` and `$container-selector` is not set):\n// <div class=\"slab\">\n//    <div class=\"slab__container\">\n//      Constrained Content Area\n//    </div>\n// </div>\n@mixin content-width( $max-width: $global-width, $gutter: false, $container-selector: '', $rr-support-ie: true) {\n    @if ( $gutter==false) {\n        $gutter: $gutter-medium;\n    }\n    @if ( $container-selector=='') {\n        $container-selector: '#{&}__container';\n    }\n    @if ( $rr-support-ie) {\n        display: -ms-grid;\n        -ms-grid-columns: minmax( $gutter, 1fr) minmax( 0, $max-width) minmax( $gutter, 1fr);\n        -ms-grid-rows: auto;\n        #{$container-selector} {\n            -ms-grid-column: 2;\n            -ms-grid-column-span: 1;\n            -ms-grid-row: auto;\n        }\n    }\n    @supports ( grid-template-columns: 1px) {\n        display: grid;\n        grid-template-columns: [left-margin] minmax($gutter, 1fr) [content-column] minmax( 0, $max-width) [right-margin] minmax($gutter, 1fr) [viewport-end];\n        #{$container-selector} {\n            grid-column-start: content-column;\n        }\n    }\n}","// Gets the list of breakpoints; very useful for walking\n// the configuration.\n@function rr-breakpoint-list($config: $rr-grid-settings) {\n    @return map-keys($config);\n}\n\n// Return a breakpoint configuration for the specified tag. \n// The tag is the first-level value in the `$rr-grid-settings` map.\n// This does not compute mobile-first cascade; you need to \n// use `$rr-combined-breakpoint` instead. \n@function rr-breakpoint($tag) {\n    $config: $rr-grid-settings;\n    @if map-has-key($config, $tag) {\n        @return map-get($config, $tag);\n    }\n    @else {\n        @return map-get($config, nth(map-keys($config), 1));\n    }\n}\n\n@function rr-first-breakpoint($break, $config: $rr-grid-settings) {\n    $breaks: rr-breakpoint-list($config);\n    @return $break==nth($breaks, 1);\n}\n\n// Returns the first breakpoint config settings.\n// Remember maps are 1-indexed.\n@function rr-breakpoint-first() {\n    @return rr-breakpoint(nth(rr-breakpoint-list(), 1));\n}\n\n// Compute the size of a grid square, computed in the unit of the\n// line height. You can pass an optional multiplier.\n@function rr-gridbase($multiplier: 1) {\n    @return ($rr-line-height / $rr-grid-divisions) * $multiplier;\n}\n\n// deprecated\n@function rr-grid-units($steps) {\n    @return rr-gridbase($steps);\n}\n\n// Takes an offset value (like the width of a border) and a number of \n// grid steps; returns the size of the remaining grid step area.\n// Useful primarily for adding borders around things. \n@function rr-grid-remainder($offset, $steps: 1) {\n    $result: 0;\n    @if $steps < 1 {\n        $result : 0;\n    } @else {\n        $stepsize: rr-gridbase($steps);\n        @if comparable($offset, $stepsize) {\n            $result: $stepsize - $offset;\n        }\n\n        @else {\n            $result: calc(#{$stepsize} - #{$offset});\n        }\n    }\n\n    @return $result;\n}\n\n// Convenience mixin for building breakpoints around the media queries. \n@mixin rr-break-directive($break,$config: $rr-grid-settings) {\n    @if rr-first-breakpoint($break,$config) {\n        /* Base Breakpoint */\n        @content;\n        /* End base breakpoint */\n    }\n    @else {\n        $mq: rr-prop-for-breakpoint($break, mq);\n        $size: rr-prop-for-breakpoint($break, size);\n        @media screen and ($mq: $size) {\n            @content;\n        }        \n    }\n}\n\n// Return a breakpoint configuration for the specified tag. \n// The tag is the first-level value in the `$rr-grid-settings` map. \n// Unlike `rr-breakpoint`, this will look up values from earlier \n// breakpoints. \n@function rr-combined-breakpoint($break: s) {\n    $breaks: rr-breakpoint-list();\n    $work-map: rr-breakpoint-first();\n    $stop: index($breaks, $break);\n    @if not $stop {\n        @return $work-map;\n    } // Bounds-check the stop\n    @if ($stop > 1) {\n        @for $i from 2 through $stop {\n            $tag: nth($breaks, $i);\n            $work-map: map-merge($work-map, rr-breakpoint($tag));\n        }\n    }\n    @return $work-map;\n}\n\n// Given a breakpoint tag and a property name, return the property value. \n// This looks for the property in the combined breakpoint.\n@function rr-prop-for-breakpoint($break, $prop) {\n    $bp: rr-combined-breakpoint($break);\n    @if map-has-key($bp, $prop) {\n        @return map-get($bp, $prop);\n    }\n    @return null;\n}\n\n// Given a breakpoint tag and a property name, return the property value. \n// This looks for the property only in the specified breakpoint.\n@function rr-strict-prop-for-breakpoint($break, $prop) {\n    $bp: rr-breakpoint($break);\n    @if map-has-key($bp, $prop) {\n        @return map-get($bp, $prop);\n    }\n    @return null;\n}\n","// Render the columns as a repeating linear gradient.\n@function rr-columns($break: s) {\n    $gutter: rr-prop-for-breakpoint($break, gutter);\n    $color: rr-prop-for-breakpoint($break, column_color);\n    $columns: rr-prop-for-breakpoint($break, columns);\n    $colwidth: 100% / $columns;\n    @if not $color {\n        $color: rgba(0, 0, 0, .5);\n    }\n    @return repeating-linear-gradient( to left, transparent 0, transparent $gutter, $color $gutter, $color $colwidth);\n}\n\n// Render the baselines as a simple linear gradient. This gradient has \n// small enough values that Safari goes batshit if you try to do it with a \n// repeating linear gradient. \n@function rr-baselines($break: s) {\n    $baseline: rr-gridbase();\n    $color: rr-prop-for-breakpoint($break, baseline_color);\n    @if not $color {\n        $color: rgba(0, 0, 0, .5);\n    }\n    @return linear-gradient( to top, #{$color} 0, #{$color} 1px, transparent 1px, transparent 100%);\n}\n\n// Pass a fontsize and how many grid-spaces of spacing you want around it,\n// and this will return font size and line-height declarations. Line-heights\n// are sent back with a unit (instead of unitless) in an attempt to keep \n// the grid a little more bullet-proof. \n//\n// If you want smaller line-height than the font size, you can pass negative \n// values.\n//\n// If you want a line height close to 1, make sure the font size is a multiple\n// of the grid base and `$steps` is 0.\n@mixin rr-font-line-height($fontsize, $steps: 0) {\n    // Our grid unit\n    $gridbase: rr-gridbase(); // Match to the font size\n    $container: ceil($fontsize / $gridbase) * $gridbase; // Add the offset value to the text\n    $leading: $steps * $gridbase;\n    font-size: $fontsize;\n    line-height: $container + $leading;\n}\n\n// Extract all the possible font sizes out of a font size config. \n// this is more complicated than your typical keywords() op because\n// font config is organized by breakpoint, then size.\n@function rr-font-sizes($font-config: $rr-fonts) {\n    $workingMap: ();\n    @each $break,\n    $fontmap in $font-config {\n        $workingMap: map-merge($workingMap, $fontmap);\n    }\n    @return map-keys($workingMap);\n}\n\n\n// Pass a font tag and a lineheight tag and rr-font-config returns font size and\n// line height properties for each breakpoint.\n@mixin rr-font-compute($size: m, $lineheight: medium, $font-config: $rr-fonts, $lineheight-config: $rr-lineheights) {\n    $breaks: rr-breakpoint-list();\n    $linegridheight: map-get($lineheight-config, $lineheight);\n    @each $break in $breaks {\n        @if map-has-key($font-config, $break) {\n            $font-size-set: map-get($font-config, $break);\n            @if map-has-key($font-size-set, $size) {\n                @include rr-break-directive($break) {\n                    $fontsize: map-get($font-size-set, $size);\n                    @include rr-font-line-height($fontsize, $linegridheight);\n                }\n            }\n        }\n    }\n}\n\n// Builds a list of style rules with the specified prefix, size tag, and\n// lineheight tag. Useful for building pattern libraries or if you intend\n// to expose design capabilities through css.\n@mixin rr-font-samples($prefix: 'text', $font-config: $rr-fonts, $lineheight-config: $rr-lineheights) {\n    $font-sizes: rr-font-sizes($font-config);\n    @each $fs in $font-sizes {\n        @each $name, $size in $fs {\n            @each $linename, $lineheight in $lineheight-config {\n                .#{$prefix}-#{$name}-#{$linename} {\n                    background-color: rgba(200, 255, 200, .3);\n                    @include rr-font-compute($name, $linename);\n                }\n            }\n        }\n    }\n}\n\n// Builds basic heading layout using the heading style configuration, including\n// media queries.\n@mixin rr-heading($config_map_tag, $heading-config: $rr-headings) {\n    @if map-has-key($heading-config, $config_map_tag) {\n        $config: map-get($map: $heading-config, $key: $config_map_tag);\n        $size: m;\n        @if map-has-key($config, size) {\n            $size: map-get($config, size);\n        }\n        $lineheight: medium;\n        @if map-has-key($config, lineheight) {\n            $lineheight: map-get($config, lineheight);\n        }\n        @include rr-font-compute($size, $lineheight);\n        $font: sans-serif;\n        @if map-has-key($config, font) {\n            $font: map-get($config, font);\n        }\n        font-family: $font;\n        @if map-has-key($config, weight) {\n            font-weight: map-get($config, weight);\n        }\n        @if map-has-key($config, style) {\n            font-style: map-get($config, style);\n        }\n    }\n}\n\n// Add columns to a ::before pseudoelement, gridlines to an ::after pseudoelement.\n@mixin rr-grid-overlay {\n    &::before {\n        content: '';\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        margin-right: auto;\n        margin-left: auto;\n        max-width: $rr_maxwidth;\n        min-height: 100vh;\n        z-index: 1000;\n        pointer-events: none;\n        mix-blend-mode: $rr-blend-mode;\n        $breaks: rr-breakpoint_list();\n        @each $break in $breaks {\n            $offset: rr-prop-for-breakpoint($break, offset);\n            $gutter: rr-prop-for-breakpoint($break, gutter);\n            $cols: rr-prop-for-breakpoint($break, columns);\n            @include rr-break-directive($break) {\n                @if $offset>0 {\n                    width: calc(100% - (2 * #{$offset}));\n                }\n                @else {\n                    width: 100%;\n                }\n                background-image: rr-columns($break);\n                background-size: calc(100% + #{$gutter});\n            }\n        }\n    }\n    &::after {\n        content: '';\n        position: absolute;\n        top: 0;\n        right: 0;\n        bottom: 0;\n        left: 0;\n        margin-right: auto;\n        margin-left: auto;\n        min-height: 100vh;\n        z-index: 1000;\n        pointer-events: none;\n        mix-blend-mode: $rr-blend-mode;\n        $breaks: rr-breakpoint_list();\n        @each $break in $breaks {\n            @include rr-break-directive($break) {\n                background: transparent rr-baselines($break) scroll repeat left top / 100% rr-gridbase();\n            }\n        }\n    }\n}\n","// maximum content width\n// If you are going for a full fluid design, set this\n// value to 100%.\n$rr-maxwidth: 72rem !default;\n\n// Divisions of the base grid size.\n$rr-line-height: 1rem !default;\n\n// How many grid squares will fit in the default line\n// height. The larger this number is, the more options\n// you have but the more difficult it becomes to establish\n// a vertical rhythm.\n$rr-grid-divisions: 2 !default;\n\n// By default, the last breakpoint is set to `$rr-maxwidth`\n// + `$rr-maxwidth-margin` to prevent a case where the\n// max content width sits against left and right margins.// \n// If you are going for a full fluid design, set this value\n// to 0.\n$rr-maxwidth-margin: 4rem !default;\n\n// Blend mode for the grid/columns overlay. This might not\n// work on all browsers. (Looking at you, Edge.)\n$rr-blend-mode: exclusion !default;\n\n// IE support flag; should be `true` if you need to support\n// IE 11 and plan to use CSS grid layouts. (We do.)\n$rr-support-ie: true !default;\n\n// Default responsive settings, assuming a mobile-first\n// approach. The first breakpoint will be used as the \n// default settings outside of a media query. If you do\n// not redefine a setting in a larger breakpoint it \n// will inherit from one of the smaller breakpoints,\n// just as you would expect.\n\n$rr-grid-settings: ( \n    s: ( \n        mq: max-width, \n        size: 35rem, \n        columns: 4, \n        gutter: 1rem / $rr-grid-divisions, \n        offset: 1rem, \n        vspace: 2,\n        column_color: rgba(128, 128, 128, .2),\n        baseline_color: rgba(128, 128, 128, .2)\n    ), \n    m: ( \n        mq: min-width, \n        size: 35rem, \n        columns: 8, \n        gutter: 1rem,\n        offset: 2rem,\n        vspace: 3\n    ), \n    l: ( \n        size: 48rem, \n        columns: 12\n    ), \n    xl: ( \n        size: $rr_maxwidth + 4rem, \n        gutter: 2rem,\n        offset: 0,\n        vspace: 4\n    )\n) !default;\n\n$rr-grids: (\n    2-up: (\n        m : (\n            columns: 2,\n        )\n    ),\n    3-up: (\n        m : (\n            columns: 3,\n        )\n    ),\n    4-up: (\n        m : (\n            columns: 2,\n        ),\n        l : (\n            columns: 4,\n        )\n    ),\n    5-up: (\n        m : (\n            columns: 3,\n        ),\n        l : (\n            columns: 5,\n        )        \n    ),\n    6-up: (\n        m : (\n            columns: 3,\n        ),\n        l : (\n            columns: 6,\n        )        \n    ),\n    sidebar-left: (\n        m: (\n            columns: 3,\n            areas : side main main\n        ),\n        l : (\n            columns: 4,\n            areas: side main main main\n        )\n    ),\n    sidebar-right: (\n        m: (\n            columns: 3,\n            areas: main main side,\n            flex-columns: 2\n        ),\n        l : (\n            columns: 4,\n            areas: main main main side\n        )\n    ),\n    major-left: (\n        m: (\n            columns: 2,\n            areas: major minor,\n            flex-columns: 2\n        ),\n        l : (\n            columns: 3,\n            areas: major major minor,\n        )        \n    ),\n    major-right: (\n        m: (\n            columns: 2,\n            areas: minor major,\n            flex-columns: 2\n        ),\n        l : (\n            columns: 3,\n            areas: minor major major,\n        )\n    )\n) !default;\n\n$rr-fonts: ( \n    s : (\n        xs: .75rem,\n        s: .875rem,\n        m: 1rem,\n        l: 1.125rem,\n        xl: 1.25rem,\n        2xl: 1.45rem,\n        3xl: 1.67rem,\n        4xl: 1.92rem,\n        5xl: 2.24rem\n    ),\n    l : (\n        2xl: 1.5rem,\n        3xl: 2.25rem,\n        4xl: 3rem,\n        5xl: 4.5rem\n    )\n) !default;\n\n$rr-headings: (\n    h1 : (\n        size: 5xl,\n        lineheight: tight,\n        font: serif,\n        weight: normal\n    ),\n    h2 : (\n        size: 4xl,\n        lineheight: tight,\n        font: serif,        \n        weight: normal,\n    ),\n    h3 : (\n        size: 3xl,\n        weight: normal,\n    ),\n    h4 : (\n        size: 2xl,        \n        weight: normal,\n    ), \n    h5 : (\n        size: xl,\n        weight: normal,\n        style: italic\n    ),\n    h6 : (\n        size: l,\n        weight: bold\n    )\n) !default;\n\n$rr-lineheights: ( \n    tight: 0,\n    medium: 1,\n    wide: 2,\n    huge: 3,\n    redic: 4\n) !default;"]}